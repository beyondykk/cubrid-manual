:meta-keywords: cubrid pl introduction, cubrid pl system
:meta-description: This chapter describes an introduction to CUBRID PL system

*****************************
개요
*****************************

저장 프로시저와 저장 함수는 SQL로 구현하기 어려운 복잡한 비즈니스 로직을 처리하고, 데이터 조작을 간편하게 수행할 수 있도록 도와준다.
다음의 주요한 장점을 가진다.

* 생산성과 사용성: 저장 프로시저와 저장 함수는 한번 만들어 놓으면 계속해서 사용할 수 있다. 사용자가 저장 프로시저와 저장 함수를 SQL에서도 호출하여 사용할 수 있고, JDBC를 사용하여 쉽게 Java 응용 프로그램에서 호출할 수 있다.
* 성능: 저장 프로시저와 저장 함수는 데이터베이스 서버에서 실행되기 때문에 네트워크 트래픽을 줄이고, 데이터베이스 서버의 성능을 향상시킨다.
* 보안: 저장 프로시저는 특정 사용자에게만 실행 권한을 부여할 수 있으므로, 데이터 접근 및 수정 권한을 세밀하게 제어할 수 있다.
* 상호 운용성과 이식성: 저장 프로시저와 저장 함수는 다양한 언어 및 실행 환경으로 동작할 수 있도록 설계되어 데이터베이스의 활용도를 극대화한다. CUBRID는 저장 프로시저/함수를 위해 다음 두 가지 절차적 언어를 지원한다.
        
        * PL/CSQL
        * Java

저장 프로시저의 생성
==============================

.. _pl-supported_sql_type:

지원하는 인수와 결과 데이터 타입
--------------------------------------

저장 프로시저와 저장 함수의 인수와 결과 데이터 타입으로 CUBRID SQL이 지원하는 데이터 타입 중 일부 데이터 타입을 명시할 수 있다.
다음의 표는 언어 확장에서 지원하는 데이터 타입이다.

+----------------+-------------------------------------+----------+----------+
|                |                                     | 지원 여부 (O, X)    |
+ 유형           + 타입                                +----------+----------+
|                |                                     | PL/CSQL  | Java SP  |
+================+=====================================+==========+==========+
| 수치           | SHORT, SMALLINT                     | O        | O        |
+                +-------------------------------------+----------+----------+
|                | INTEGER, INT                        | O        | O        |
+                +-------------------------------------+----------+----------+
|                | BIGINT                              | O        | O        |
+                +-------------------------------------+----------+----------+
|                | NUMERIC, DECIMAL                    | O        | O        |
+                +-------------------------------------+----------+----------+
|                | FLOAT, REAL                         | O        | O        |
+                +-------------------------------------+----------+----------+
|                | DOUBLE, DOUBLE PRECISION            | O        | O        |
+----------------+-------------------------------------+----------+----------+
| 날짜/시간      | DATE, TIME, TIMESTAMP, DATETIME     | O        | O        |
+                +-------------------------------------+----------+----------+
|                | TIMESTAMPLTZ, TIMESTAMPTZ           | X        | X        |
|                | DATETIMELTZ, DATETIMETZ             |          |          |
+----------------+-------------------------------------+----------+----------+
| 문자열         | CHAR, VARCHAR, STRING, CHAR VARYING | O        | O        |
+----------------+-------------------------------------+----------+----------+
| 컬렉션         | SET, MULTISET, LIST, SEQUENCE       | X        | O        |
+----------------+-------------------------------------+----------+----------+
| 기타           | BIT, BIT VARYING                    | X        | X        |
+                +-------------------------------------+----------+----------+
|                | ENUM                                | X        | X        |
+                +-------------------------------------+----------+----------+
|                | BLOB/CLOB                           | X        | X        |
+                +-------------------------------------+----------+----------+
|                | JSON                                | X        | X        |
+                +-------------------------------------+----------+----------+
|                | CURSOR                              | X        | O*       |
+----------------+-------------------------------------+----------+----------+

* Java SP에서는 CURSOR 타입에 대해서 반환 타입만을 지원하며, 인수 타입으로는 지원하지 않는다.


지원하지 않는 데이터 타입을 사용해서 저장 프로시저를 생성하면 다음과 같은 오류가 발생한다.

.. code-block:: sql
        
        CREATE FUNCTION unsupported_json() RETURN JSON 
        AS BEGIN RETURN NULL; END;

        CREATE PROCEDURE unsupproted_args (arg TIMESTAMPLTZ) 
        AS BEGIN NULL; END;

::

        ERROR: Unsupported return type 'json' of the stored procedure

        ERROR: before ' ) 
        AS BEGIN NULL; END; '
        Unsupported argument type 'timestampltz' of the stored procedure

.. _pl-default-argument:

기본값 인수 사용
------------------------------

저장 프로시저와 저장 함수의 인수에 기본값을 지정할 수 있다.

* **:=** 또는 **DEFAULT** 키워드를 사용하여 기본값을 지정할 수 있다.
* 기본값을 지정하면 저장 프로시저와 저장 함수의 인수를 생략하고 호출할 수 있다. 생략된 인수는 기본값으로 대체된다.
* 기본값은 리터럴 값으로 지정할 수 있으며, 255 바이트 이하의 문자열 값으로 저장한다. 이 때 크기를 초과하면 오류가 발생한다.
* 기본값에 리터럴 값 외에 허용하는 함수는 다음과 같다.

+-------------------------------+---------------+
| 기본값                        | 데이터 타입   |
+===============================+===============+
| SYS_TIMESTAMP                 | TIMESTAMP     |
+-------------------------------+---------------+
| UNIX_TIMESTAMP()              | INTEGER       |
+-------------------------------+---------------+
| CURRENT_TIMESTAMP             | TIMESTAMP     |
+-------------------------------+---------------+
| SYS_DATETIME                  | DATETIME      |
+-------------------------------+---------------+
| CURRENT_DATETIME              | DATETIME      |
+-------------------------------+---------------+
| SYS_DATE                      | DATE          |
+-------------------------------+---------------+
| CURRENT_DATE                  | DATE          |
+-------------------------------+---------------+
| SYS_TIME                      | TIME          |
+-------------------------------+---------------+
| CURRENT_TIME                  | TIME          |
+-------------------------------+---------------+
| USER, USER()                  | STRING        |
+-------------------------------+---------------+
| TO_CHAR(date_time[, format])  | STRING        |
+-------------------------------+---------------+
| TO_CHAR(number[, format])     | STRING        |
+-------------------------------+---------------+

다음은 기본값에 리터럴 값을 지정하는 간단한 예시이다.

.. code-block:: sql

        CREATE FUNCTION default_args (
                a INT := 1, 
                b INT DEFAULT 2
        ) RETURN INT
        AS BEGIN RETURN a + b; END;

        SELECT default_args(); -- 3
        SELECT default_args(3); -- 5
        SELECT default_args(3, 4); -- 7

::

          default_args()
        ================
                        3

          default_args(3)
        =================
                        5

          default_args(3, 4)
        ====================
                        7

다음은 기본값에 함수를 지정하는 예시이다.

.. code-block:: sql

        CREATE FUNCTION default_args_func (
                a INT := UNIX_TIMESTAMP(), 
                b DATE DEFAULT CURRENT_DATE
        ) RETURN INT
        AS BEGIN RETURN a + b; END;

        SELECT default_args_func(); -- UNIX_TIMESTAMP() + CURRENT_DATE
        SELECT default_args_func(3); -- 3 + CURRENT_DATE
        SELECT default_args_func(3, 4); -- 3 + 4